/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package BookStore;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.UIManager;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

public class MainFrame extends javax.swing.JFrame {

    private final BookStore Store; //Объект нашего класса "Магазин"
    private final DefaultTableModel DepartmentsTableModel = new DefaultTableModel(); //Модель для таблицы отделов
    private final DefaultTableModel BooksTableModel = new DefaultTableModel(); //Модель для таблицы книг

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        Store = new BookStore(); //Создаём объект класса магазин
        BooksTableModel.addColumn("Название"); //Добавляем колонки в таблицу
        BooksTableModel.addColumn("Автор");
        BooksTableModel.addColumn("Количество");
        BooksTable.setDefaultEditor(Object.class, null); //Отключаем редактирование в таблице
        DepartmentsTableModel.addColumn("Название");
        DepartmentsTableModel.addColumn("Кол. наименований");
        DepartmentsTableModel.addColumn("Общее кол. книг");
        DepartmentsTable.setDefaultEditor(Object.class, null); //Отключаем редактирование в таблице
        DepartmentsTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() { //Обработчик на таблицу отделов
            @Override
            public void valueChanged(ListSelectionEvent event) {
                if (DepartmentsTable.getSelectedRow() > -1) { //Если выбрали сроку
                    RefreshBooks(DepartmentsTable.getValueAt(DepartmentsTable.getSelectedRow(), 0).toString()); //То обновляем список книг для выбранного отдела
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        DepartmentsPanel = new javax.swing.JPanel();
        AddDepartmentButton = new javax.swing.JButton();
        RemoveDepartmentButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        DepartmentsTable = new javax.swing.JTable();
        BooksPanel = new javax.swing.JPanel();
        RemoveBookButton = new javax.swing.JButton();
        AddBookButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        BooksTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        AmountBooksLabel = new javax.swing.JLabel();
        MenuBar = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        Load = new javax.swing.JMenuItem();
        Save = new javax.swing.JMenuItem();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Книжный магазин");
        setLocation(new java.awt.Point(0, 0));
        setResizable(false);

        DepartmentsPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        AddDepartmentButton.setText("Добавить отдел");
        AddDepartmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddDepartmentButtonActionPerformed(evt);
            }
        });

        RemoveDepartmentButton.setText("Удалить отдел");
        RemoveDepartmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveDepartmentButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Отделы:");

        DepartmentsTable.setModel(DepartmentsTableModel);
        DepartmentsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane4.setViewportView(DepartmentsTable);

        javax.swing.GroupLayout DepartmentsPanelLayout = new javax.swing.GroupLayout(DepartmentsPanel);
        DepartmentsPanel.setLayout(DepartmentsPanelLayout);
        DepartmentsPanelLayout.setHorizontalGroup(
            DepartmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DepartmentsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DepartmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(DepartmentsPanelLayout.createSequentialGroup()
                        .addGroup(DepartmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(DepartmentsPanelLayout.createSequentialGroup()
                                .addComponent(AddDepartmentButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(RemoveDepartmentButton))
                            .addComponent(jLabel1))
                        .addGap(0, 130, Short.MAX_VALUE)))
                .addContainerGap())
        );
        DepartmentsPanelLayout.setVerticalGroup(
            DepartmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DepartmentsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(DepartmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RemoveDepartmentButton)
                    .addComponent(AddDepartmentButton))
                .addContainerGap())
        );

        BooksPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        RemoveBookButton.setText("Удалить книгу");
        RemoveBookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveBookButtonActionPerformed(evt);
            }
        });

        AddBookButton.setText("Добавить книгу");
        AddBookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBookButtonActionPerformed(evt);
            }
        });

        BooksTable.setAutoCreateRowSorter(true);
        BooksTable.setModel(BooksTableModel);
        BooksTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(BooksTable);

        jLabel2.setText("Книги:");

        AmountBooksLabel.setText("Всего книг в магазине: 0");

        javax.swing.GroupLayout BooksPanelLayout = new javax.swing.GroupLayout(BooksPanel);
        BooksPanel.setLayout(BooksPanelLayout);
        BooksPanelLayout.setHorizontalGroup(
            BooksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BooksPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(BooksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BooksPanelLayout.createSequentialGroup()
                        .addGroup(BooksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(BooksPanelLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(0, 691, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(BooksPanelLayout.createSequentialGroup()
                        .addComponent(AddBookButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(RemoveBookButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(AmountBooksLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22))))
        );
        BooksPanelLayout.setVerticalGroup(
            BooksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BooksPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BooksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddBookButton)
                    .addComponent(RemoveBookButton)
                    .addComponent(AmountBooksLabel))
                .addContainerGap())
        );

        File.setText("Файл");

        Load.setText("Загрузить");
        Load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadActionPerformed(evt);
            }
        });
        File.add(Load);

        Save.setText("Сохранить");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });
        File.add(Save);

        MenuBar.add(File);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(DepartmentsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BooksPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DepartmentsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BooksPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void RemoveDepartmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveDepartmentButtonActionPerformed
        // Обработчик кнопки "Удалить отдел"
        int SelectedIndex = DepartmentsTable.getSelectedRow(); //Получаем номер выбранного элемента
        if (SelectedIndex != -1) { //Если есть выбранный элемент
            String DepartmentToRemoveName = DepartmentsTable.getValueAt(SelectedIndex, 0).toString(); //Получаем значение из первой колонки строки
            if (JOptionPane.showConfirmDialog(this, "Вы точно хотите удалить отдел \"" + DepartmentToRemoveName + "\"?", "Подтверждение", JOptionPane.YES_NO_OPTION) == 0) { //Спрашиваем подтверждение
                Store.RemoveDepartment(DepartmentToRemoveName); //Удаляем отдел
                RefreshDepartments();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Сначала выберите отдел", "Ошибка", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_RemoveDepartmentButtonActionPerformed


    private void AddDepartmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddDepartmentButtonActionPerformed
        // Обработчик кнопки "Добавить отдел"
        JDialog NewDepartment = new NewDepartmentDialog(Store); //Создаём диалог добавления отдела, передаём ему магазин, куда нужно добавить книгу
        NewDepartment.setVisible(true); //Показываем диалог
        RefreshDepartments(); //обновляем список отделов
    }//GEN-LAST:event_AddDepartmentButtonActionPerformed

    private void AddBookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBookButtonActionPerformed
        // Обработчик кнопки "Добавить книгу"
        if (DepartmentsTable.getSelectedRow() != -1) { //Если отдел выбран
            Department Current = Store.FindDepartment(DepartmentsTable.getValueAt(DepartmentsTable.getSelectedRow(), 0).toString()); //Находим объект отдела по названию
            JDialog NewBook = new NewBookDialog(Current); //Создаём диалог добавления книги, передаём ему отдел куда нужно добавить книгу
            NewBook.setVisible(true); //Показываем диалог
            RefreshDepartments(); //обновляем список отделов
        } else {
            JOptionPane.showMessageDialog(null, "Сначала выберите отдел, куда нужно добавить книгу", "Ошибка", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_AddBookButtonActionPerformed

    private void RemoveBookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveBookButtonActionPerformed
        // Обработчик кнопки "Удалить книгу"
        if (BooksTable.getRowCount() > 0) {
            if (JOptionPane.showConfirmDialog(this, "Вы точно хотите удалить книгу?", "Подтверждение", JOptionPane.YES_NO_OPTION) == 0) {  //Спрашиваем подтверждение
                Department Current = Store.FindDepartment(DepartmentsTable.getValueAt(DepartmentsTable.getSelectedRow(), 0).toString()); //Находим обьъект отдела по названию выбранного отдела
                Current.Pop(); //Удаляем книгу
                RefreshBooks(Current.GetDepartmentName()); //Обновляем список книг
                DepartmentsTable.setValueAt(Current.AmountBooksInDepartment(), DepartmentsTable.getSelectedRow(), 1); //Обновляем количество книг в отделе
                AmountBooksLabel.setText("Всего книг в магазине: " + Store.AmountBooksInStore()); //Обновляем счётчик книг в магазине
            }
        } else {
            JOptionPane.showMessageDialog(null, "Отдел пуст", "Ошибка", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_RemoveBookButtonActionPerformed

    private void LoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadActionPerformed
        //Обрабочик пункта меню "Загрузить"
        JFileChooser FileDialog = new JFileChooser(); //Создаём диалог для выбора файлов
        FileDialog.setApproveButtonText("Загрузить"); //Название для кнопки подтверждения
        FileDialog.setDialogTitle("Выберите файл для загрузки");//Заголовок
        FileDialog.addChoosableFileFilter(new FileNameExtensionFilter("Books Store Files", "bsr")); //Маска для файлов
        FileDialog.setAcceptAllFileFilterUsed(false); //Отключаем маску с любыми файлами
        if (FileDialog.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { //Если выбрали файл
            Store.LoadStoreFromFile(FileDialog.getSelectedFile()); //Загружаем магазин из файла
            RefreshDepartments(); //обновляем список отделов
        }
    }//GEN-LAST:event_LoadActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        //Обрабочик пункта меню "Сохранить"
        if (Store.GetFirst() != null) {  //Если магазин не пуст
            JFileChooser FileDialog = new JFileChooser(); //Создаём диалог для выбора файлов
            FileDialog.setApproveButtonText("Сохранить"); //Название для кнопки подтверждения
            FileDialog.setDialogTitle("Выберите файл для сохранения");//Заголовок
            FileDialog.addChoosableFileFilter(new FileNameExtensionFilter("Books Store Files", "bsr")); //Маска для файлов
            FileDialog.setAcceptAllFileFilterUsed(false); //Отключаем маску с любыми файлами
            if (FileDialog.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) { //Если выбрали файл
                Store.SaveStoreToFile(FileDialog.getSelectedFile()); //Сохраняем магазин в файл
            }
        } else {
            JOptionPane.showMessageDialog(null, "Магазин пуст, нечего сохранять", "Ошибка", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_SaveActionPerformed

    public void RefreshDepartments() {
        // Метод обновления списка отделов
        int SelectedIndex = DepartmentsTable.getSelectedRow(); //Получаем номер выбранного элемента
        DepartmentsTableModel.setRowCount(0); //Очищаем модель списка
        if (Store.GetFirst() != null) {
            Department Temp = Store.GetFirst(); //Начинаем с первого элемента
            do {
                DepartmentsTableModel.addRow(new Object[]{Temp.GetDepartmentName(), Temp.Size(), Temp.AmountBooksInDepartment()}); //Добавляем элемент
                Temp = Temp.GetNext(); //Переходим к следующему
            } while (Temp != Store.GetFirst()); //Пока не дойдём вновь до первого элемента
        }
        if (DepartmentsTable.getRowCount() != 0 && SelectedIndex != -1) { //Если в списке есть элементы и до обновления был выделен какой-то элемент
            if (SelectedIndex == DepartmentsTable.getRowCount()) { //Если удалённый элемент был последним, то выделяем предыдущий элемент, иначе SelectedIndex будет равен id следующего элемента
                SelectedIndex--;
            }
            DepartmentsTable.setRowSelectionInterval(SelectedIndex, SelectedIndex);//Выделяем элемент
        } else {
            BooksTableModel.setRowCount(0);
        }
        AmountBooksLabel.setText("Всего книг в магазине: " + Store.AmountBooksInStore()); //Обновляем счётчик книг в магазине
    }

    private void RefreshBooks(String Department) {
        // Метод обновления таблицы книг
        Department Current = Store.FindDepartment(Department); //Находим отдел
        BooksTableModel.setRowCount(0); //Очищаем модель таблицы
        if (Current.Size() > 0) { //Если в отделе есть книги
            for (int i = 0; i < Current.Size(); ++i) { //Добавляем каждую книгу в модель таблицы
                Book TempBook = Current.Pop();
                Current.Push(TempBook);
                BooksTableModel.addRow(new Object[]{TempBook.GetBookName(), TempBook.GetBookAuthor(), TempBook.GetBookQuantity()});
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); //Устанавливаем системный look and feel, чтобы UI выглядел нативно
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        new MainFrame().setVisible(true);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddBookButton;
    private javax.swing.JButton AddDepartmentButton;
    private javax.swing.JLabel AmountBooksLabel;
    private javax.swing.JPanel BooksPanel;
    private javax.swing.JTable BooksTable;
    private javax.swing.JPanel DepartmentsPanel;
    private javax.swing.JTable DepartmentsTable;
    private javax.swing.JMenu File;
    private javax.swing.JMenuItem Load;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JButton RemoveBookButton;
    private javax.swing.JButton RemoveDepartmentButton;
    private javax.swing.JMenuItem Save;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
